#ifndef LOWUTILS_H
#define LOWUTILS_H
#include <immintrin.h>

inline uint64_t rdcycle() {
    unsigned int lo, hi;
    asm volatile("rdtsc" : "=a"(lo), "=d"(hi));
    return (static_cast<uint64_t>(hi) << 32) | lo;
}

inline uint64_t rdpru() {
    uint32_t eax, edx;
    uint32_t ecx = 1;                         // ECX = 1 to read APERF
    __asm__ volatile(".byte 0x0F, 0x01, 0xFD" // Opcode for RDPRU
                     : "=a"(eax), "=d"(edx)
                     : "c"(ecx)
                     : "memory");
    return ((uint64_t)edx << 32) | eax;
}

static uint64_t rdtsc() {
    uint64_t lo, hi;
    asm volatile("rdtsc" : "=a"(lo), "=d"(hi) : : "%rcx");
    return (hi << 32) | lo;
}

static uint64_t rdtscp() {
    uint64_t lo, hi;
    asm volatile("rdtscp\n" : "=a"(lo), "=d"(hi)::"%rcx");
    return (hi << 32) | lo;
}

inline uint64_t access_time_ptr(const volatile uint64_t* ptr, uint64_t *tsc) {
    const uint64_t t0 = rdpru();
    // _mm_mfence();
    _mm_lfence();
    *ptr;
    // _mm_mfence();
    _mm_lfence();
    const uint64_t t1 = rdpru();
    auto diff = t1 - t0;
    if (tsc != nullptr)
        *tsc = t1;
    return diff;
}

#endif // LOWUTILS_H
