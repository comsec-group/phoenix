#pragma once

#include "src/dram_address.hpp"

#include <cstdint>
#include <filesystem>

#define COLOR_RED "\x1b[31m"
#define COLOR_GREEN "\x1b[32m"
#define COLOR_RESET "\x1b[0m"

struct bit_flip_info_t {
    dram_address address;       // 8-byte-aligned DRAM address
    uint64_t flipped_mask{};    // 1-bits mark positions that differ vs. pattern
    uint64_t corrupted_value{}; // full 64-bit word read from DRAM
};

bool is_exploitable(const bit_flip_info_t& bf, uint64_t alignment, uint64_t page_size);

std::vector<bit_flip_info_t> collect_bit_flips(const std::vector<dram_address>& dram_addresses_victims,
                                               uint64_t data_pattern_victim);


void initialize_data_pattern(const std::vector<dram_address>& dram_addresses_aggs,
                             uint64_t data_pattern);

void print_bit_flips_brief(const std::vector<bit_flip_info_t>& bit_flips);

void write_bit_flips_csv(int pattern_id,
                         std::vector<bit_flip_info_t> bit_flips,
                         int reads_per_trefi,
                         int sync_cycles_threshold,
                         int row_base_offset,
                         const std::filesystem::path& filepath);
