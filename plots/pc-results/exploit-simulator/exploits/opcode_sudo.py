#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) 2016 Andrei Tatar
# Copyright (c) 2018 Vrije Universiteit Amsterdam
#
# This program is licensed under the GPL2+.

import sys
import json
sys.path.append("../")
from rhsimulator.sim import *
from rhsimulator.flip import *

def bit(x):
    return 1<<x

class OpcodeFlip(ExploitModel):
    def __init__(self):
        self.offsets = [(3100, 4), (3122, 3), (3406, 0), (3407, 0), (3417, 0), (3417, 1), 
                        (3417, 2), (3417, 3), (3417, 6), (3418, 5), (3421, 7), (3422, 0),
                        (3423, 0), (3517, 3), (3517, 7), (3519, 0), (3519, 3), (3524, 3),
                        (3525, 1), (3525, 2), (3529, 3), (3529, 4), (3530, 7), (3531, 3),
                        (3535, 0), (3535, 3), (3536, 2), (3537, 0), (3619, 6)] 

    def check_page(self, vpage):
        useful = [x  for (pg_off, bit) in self.offsets for x in vpage.pulldowns if x.byte_offset == pg_off and x.mask == bit] 
        return len(useful) > 0




if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Missing arguments")
        print(f"usage: python3 {__file__} path_to_json")
    else:

        with open(sys.argv[1]) as f:
            data = json.load(f)

        metadata = data['metadata']
        
        # NOTE!! at the moment sweeps are being parsed seperately
        # this means that if different sweeps are being performed
        # the stats will be printed separately 
        for sweep in data['sweeps']:
            ftbl = Fliptable.from_sweep(sweep, metadata)
            est = FliptableEstimator(ftbl)
            est.run_exploit(OpcodeFlip())
            est.print_stats()
