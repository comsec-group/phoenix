#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) 2016 Andrei Tatar
# Copyright (c) 2018 Vrije Universiteit Amsterdam
#
# This program is licensed under the GPL2+.


import sys
import json
sys.path.append("../")
from rhsimulator.sim import *
from rhsimulator.flip import *



class _PreciseFlipExploit(ExploitModel):
    """Exploit that relies on finding one out of a precise list of bit flips"""
    # Default and fallback; override these
    pullups = set()
    pulldowns = set()

    def check_page(self, vpage):
        useful = (vpage.pullups & self.pullups) | (vpage.pulldowns & self.pulldowns)
        return len(useful) > 0


class APTSourcesFlip(_PreciseFlipExploit):

    # Taken from Ubuntu 15.04's /etc/apt/sources.list
    domains = {
    "us.archive.ubuntu.com" : {
        "indexes" : [326, 393, 539, 614, 888, 948, 1004, 1072, 1450, 1512, 1570, 1640, 2043, 2140],
        "variations" : [
            "us.archive.tbuntu.com", "us.archive.wbuntu.com", "us.archive.qbuntu.com",
            "us.archive.ebuntu.com", "us.archive.5buntu.com", "us.archive.ucuntu.com",
            "us.archive.ufuntu.com", "us.archive.ujuntu.com", "us.archive.uruntu.com",
            "us.archive.ubtntu.com", "us.archive.ubwntu.com", "us.archive.ubqntu.com",
            "us.archive.ubentu.com", "us.archive.ub5ntu.com", "us.archive.ubuotu.com",
            "us.archive.ubultu.com", "us.archive.ubujtu.com", "us.archive.ubuftu.com",
            "us.archive.ubunuu.com", "us.archive.ubunvu.com", "us.archive.ubunpu.com",
            "us.archive.ubundu.com", "us.archive.ubun4u.com", "us.archive.ubuntt.com",
            "us.archive.ubuntw.com", "us.archive.ubuntq.com", "us.archive.ubunte.com",
            "us.archive.ubunt5.com"
            ],
        },
    "security.ubuntu.com" : {
        "indexes" : [2234, 2307, 2376, 2442, 2504, 2572],
        "variations" : [
            "security.tbuntu.com", "security.wbuntu.com", "security.qbuntu.com",
            "security.ebuntu.com", "security.5buntu.com", "security.ucuntu.com",
            "security.ufuntu.com", "security.ujuntu.com", "security.uruntu.com",
            "security.ubtntu.com", "security.ubwntu.com", "security.ubqntu.com",
            "security.ubentu.com", "security.ub5ntu.com", "security.ubuotu.com",
            "security.ubultu.com", "security.ubujtu.com", "security.ubuftu.com",
            "security.ubunuu.com", "security.ubunvu.com", "security.ubunpu.com",
            "security.ubundu.com", "security.ubun4u.com", "security.ubuntt.com",
            "security.ubuntw.com", "security.ubuntq.com", "security.ubunte.com",
            "security.ubunt5.com"
            ],
        },
    }

    def _setup_flips(self):
        self.pullups = set()
        self.pulldowns = set()
        for dom, v in self.domains.items():
            dombytes = dom.encode('utf-8')
            idxs = [x % 0x1000 for x in v['indexes']]
            for var in (x.encode('utf-8') for x in v['variations']):
                diff = bytes(x ^ var[i] for i, x in enumerate(dombytes))
                doff = 0
                fmask = 0
                for i, b in enumerate(diff):
                    if b:
                        doff = i
                        fmask = b
                        break
                if dombytes > var:
                    self.pulldowns.update({
                        PageBitFlip(byte_offset=x + doff, mask=fmask)
                        for x in idxs
                    })
                else:
                    self.pullups.update({
                        PageBitFlip(byte_offset=x + doff, mask=fmask)
                        for x in idxs
                    })

    def __init__(self):
        self._setup_flips()



class GPGFlip(_PreciseFlipExploit):
    ffs_bit_offsets_up = [
        338, 361, 398, 409, 490, 539, 562, 568, 586, 602,
        625, 630, 635, 643, 661, 685, 691, 698, 712, 731,
        784, 801, 813, 820, 825, 848, 850, 861, 862, 907,
        938, 939, 958, 962, 1018, 1049, 1061, 1091, 1123,
        1131, 1163, 1171, 1179, 1186, 1203, 1206, 1228, 1230,
        1269, 1286, 1300, 1338, 1379, 1400, 1409, 1466, 1488,
        1501, 1504, 1571, 1600, 1633, 1675, 1724, 1733, 1737,
        1744, 1745, 1762, 1773, 1797, 1834, 1849, 1861, 1877,
        1882, 1883, 1925, 1960, 1963, 1970, 1990, 2036, 2043,
        2085, 2105, 2114, 2117, 2133, 2177, 2217, 2251, 2253,
        2259, 2260, 2265, 2382, 2421, 2425, 2474, 2489, 2496,
        2515, 2573, 2580, 2594, 2603, 2627, 2633, 2634, 2689,
        2714, 2749, 2778, 2873, 2874, 2890, 2907, 2914, 2917,
        2922, 2925, 2938, 2953, 2984, 2997, 2998, 3018
    ]

    ffs_bit_offsets_down = [
        380, 520, 1004, 1100, 1144, 1156, 1344, 1456, 1548,
        1624, 1684, 1884, 2000, 2088, 2108, 2160, 2196,
        2372, 2736, 2772, 2924
    ]

    pulldowns = {
        PageBitFlip(byte_offset=((x // 8) % 0x1000), mask=(1 << (x % 8)))
        for x in ffs_bit_offsets_down
    }
    pullups = {
        PageBitFlip(byte_offset=((x // 8) % 0x1000), mask=(1 << (x % 8)))
        for x in ffs_bit_offsets_up
    }


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Missing arguments")
        print(f"usage: python3 {__file__} path_to_json")
    else:

        with open(sys.argv[1]) as f:
            data = json.load(f)

        metadata = data['metadata']
        
        # NOTE!! at the moment sweeps are being parsed seperately
        # this means that if different sweeps are being performed
        # the stats will be printed separately 
        gpg_estimators = []
        apt_estimators = []
        for sweep in data['sweeps']:
            ftbl = Fliptable.from_sweep(sweep, metadata)
            print('GPGFlip')
            gpg_estimators.append(
                    FliptableEstimator.main(ftbl, GPGFlip()))
            print('\nAPT sources.list domain flip')
            apt_estimators.append(
                    FliptableEstimator.main(ftbl, APTSourcesFlip()))

