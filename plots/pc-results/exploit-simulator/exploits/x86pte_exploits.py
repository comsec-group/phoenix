#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) 2016 Andrei Tatar
# Copyright (c) 2018 Vrije Universiteit Amsterdam
#
# This program is licensed under the GPL2+.

import sys
import json
sys.path.append("../")
from rhsimulator.sim import *
from rhsimulator.flip import *

class ClearNX(ExploitModel):
    """Exploit that clears the NX bit in a PTE"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pulldowns if x.byte_offset % 8 == 7 and x.mask == 0b10000000]
        return len(useful) > 0


class SetRW(ExploitModel):
    """Exploit that sets the R/W bit making a page writable"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pullups if x.byte_offset % 8 == 0 and x.mask == 0b00000010]
        return len(useful) > 0


class SetUS(ExploitModel):
    """Exploit that sets the U/S bit making the page available from userspace"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pullups if x.byte_offset % 8 == 0 and x.mask == 0b00000100]
        return len(useful) > 0


class FlipPFN(ExploitModel):
    """Exploit that changes the PFN in a page table entry, redirecting memory accesses"""

    def __init__(self, totalmem=(8 << 30)):
        self.pfnbits = totalmem.bit_length() - 12 
    
    def check_page(self, vpage):
        """
        63   62      59  58               52  51                                             35  34                                                               12              7                    0   
        ┌─┐┌──────────┐┌───────────────────┐┌─────────────────────────────────────────────────┐┌───────────────────────────────────────────────────────────────────┐┌─┐┌─┐┌─┐┌─┐┌─┐┌─┐┌─┐┌─┐┌─┐┌─┐┌─┐┌─┐  
        │X││          ││                   ││                                                 ││                                                                   ││I││I││I││ ││P││ ││ ││P││P││U││R││ │  
        │D││Prot. Key ││      Ignored      ││                    Reserved                     ││                   Physical Address of 4 KB page                   ││G││G││G││G││A││D││A││C││W││/││/││1│  
        │ ││          ││                   ││                                                 ││                                                                   ││N││N││N││ ││T││ ││ ││D││T││S││W││ │  
        └─┘└──────────┘└───────────────────┘└─────────────────────────────────────────────────┘└───────────────────────────────────────────────────────────────────┘└─┘└─┘└─┘└─┘└─┘└─┘└─┘└─┘└─┘└─┘└─┘└─┘  
        ███████████████████████ ███████████████████████ ███████████████████████ ███████████████████████ ███████████████████████ ███████████████████████ ███████████████████████ ███████████████████████  
        byte_offset % 8 == 7    byte_offset % 8 == 6    byte_offset % 8 == 5    byte_offset % 8 == 4    byte_offset % 8 == 3    byte_offset % 8 == 2    byte_offset % 8 == 1    byte_offset % 8 == 0
        """
        bits_left = self.pfnbits
        # adds 4 upper bits in the 8-bit segment covered by byte_offset % 8 == 1
        useful = [
            x for x in vpage.pullups | vpage.pulldowns
            if x.byte_offset % 8 == 1 and (x.mask & 0b11110000)
        ]
        # adds 2x8 bits in the 8-bit segments covered by byte_offset % 8 == 2 and byte_offset % 8 == 3
        bits_left -= 4
        off = 2
        while bits_left // 8 > 0:
            # print('bits_left // 8 = ', bits_left//8, '> 0 => YES')
            # print('x.byte_offset == ', off)
            useful.extend(x for x in vpage.pullups | vpage.pulldowns if x.byte_offset == off)
            off += 1
            bits_left -= 8
        # print('bits_left // 8 > 0: NO')
        # adds remaining 3 bits in the 8-bit segment covered by byte_offset % 8 == 4
        if bits_left:
            bmask = 2**bits_left - 1
            # print("bmask = {0:#010b}".format(bmask), ', x.byte_offset ==', off)
            useful.extend(
                x for x in vpage.pullups | vpage.pulldowns
                if (x.byte_offset == off and (x.mask & bmask))
            )
        return len(useful) > 0

class GlobalPFN(ExploitModel):
    """Exploit that changes the PFN in a page table entry, redirecting memory accesses"""

    def __init__(self, totalmem=(8 << 30)):
        self.pfnbits = totalmem.bit_length() - 12

    def check_page(self, vpage):
        bits_left = self.pfnbits
        useful = [
            x for x in vpage.pullups | vpage.pulldowns
            if x.byte_offset % 8 == 1 and (x.mask & 0b11110000)
        ]
        bits_left -= 4
        off = 2
        while bits_left // 8 > 0:
            useful.extend(x for x in vpage.pullups | vpage.pulldowns if x.byte_offset == off)
            off += 1
            bits_left -= 8
        if bits_left:
            bmask = 2**bits_left - 1
            useful.extend(
                x for x in vpage.pullups | vpage.pulldowns
                if (x.byte_offset == off and (x.mask & bmask))
            )
        useful +=  [x for x in vpage.pullups if x.byte_offset % 8 == 0 and x.mask == 0b00000100] 

        return len(useful) > 0


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("Missing arguments")
        print(f"usage: python3 {__file__} path_to_json")
    else:
        with open(sys.argv[1]) as f:
            data = json.load(f)

        metadata = data['metadata']
        
        # NOTE!! at the moment sweeps are being parsed seperately
        # this means that if different sweeps are being performed
        # the stats will be printed separately 
        gpg_estimators = []
        apt_estimators = []
        for sweep in data['sweeps']:
            ftbl = Fliptable.from_sweep(sweep, metadata)
            est = FliptableEstimator(ftbl)
            print('ClearNX')
            est.run_exploit(ClearNX())
            est.print_stats()
            print('\nSetRW')
            est.run_exploit(SetRW())
            est.print_stats()
            print('\nSetUS')
            est.run_exploit(SetUS())
            est.print_stats()
            print('\nFlipPFN assuming 8GB mem')
            sz = 8<<30 
            est.run_exploit(FlipPFN(sz))
            est.print_stats()

